version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
    volumes:
      - ./server:/usr/src/renti
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ['npm', 'run', 'migration:run']

  seed:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
    volumes:
      - ./server:/usr/src/renti
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    entrypoint: ['npm', 'run', 'seed:run']

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    # env_file:
    #   - ./server/.env
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
    ports:
      - 3001:3001
    volumes:
      - ./server:/usr/src/renti
      - node_modules_server:/usr/src/renti/node_modules
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      seed:
        condition: service_completed_successfully
    command: npm run dev

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    # env_file:
    #   - ./client/.env
    volumes:
      - ./client:/usr/src/renti
      - node_modules_client:/usr/src/renti/node_modules
    ports:
      - '3000:3000'
    environment:
      WATCHPACK_POLLING: true
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      seed:
        condition: service_completed_successfully
      server:
        condition: service_started
    command: npm start

volumes:
  db-data:
  node_modules_server:
  node_modules_client:
